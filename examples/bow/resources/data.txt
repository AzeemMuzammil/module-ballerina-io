Specification Ballerina gRPC Library
Introduction
This is the specification for gRPC standard library which provides gRPC functionalities in the Ballerina programming languagehttpsballerinaio which is an opensource programming language for the cloud
that makes it easier to use combine and create network services
Contents
1 Overview1overview
2 gRPC Command Line Interface CLI1grpccommandlineinterfacecli
3 Protocol Buffers to Ballerina Data Mapping3protocolbufferstoballerinadatamapping
4 gRPC Communication4grpccommunication
41 Simple RPC41simplerpc
42 Server Streaming RPC42serverstreamingrpc
43 Client Streaming RPC43clientstreamingrpc
44 Bidirectional Streaming RPC44bidirectionalstreamingrpc
5 gRPC Security51authenticationandauthorization
51 Authentication and Authorization51authenticationandauthorization
511 Declarative Approach511declarativeapproach
5111 Service File User Store5111servicefileuserstore
5112 Service LDAP User Store5112serviceldapuserstore
5113 Service JWT5113servicejwt
5114 Service OAuth25114serviceoauth2
5115 Client Basic Auth5115clientbasicauth
5116 Client Bearer Token Auth5116clientbearertokenauth
5117 Client Self Signed JWT Auth5117clientselfsignedjwtauth
5118 Client OAuth25118clientoauth2
512 Imperative Approach512imperativeapproach
5121 Service File User Store5121servicefileuserstore
5122 Service LDAP User Store5122serviceldapuserstore
5123 Service JWT5123servicejwt
5124 Service OAuth25124serviceoauth2
5125 Client Basic Auth5125clientbasicauth
5126 Client Bearer Token Auth5126clientbearertokenauth
5127 Client Self Signed JWT Auth5127clientselfsignedjwtauth
5128 Client OAuth25128clientoauth2
6 gRPC Utility Functions6grpcutilityfunctions
61 gRPC Deadline61grpcdeadline
62 gRPC Compression62grpccompression
63 gRPC Access and Trace Logs63grpcaccessandtracelogs
64 gRPC Retry64grpcretry
1 Overview
Ballerina gRPC standard library has five primary aspects in handling values
1 gRPC CLI command line interface
2 Protocol buffers to Ballerina data mapping
3 gRPC communication
4 gRPC Security
5 gRPC utility functions
2 gRPC Command Line Interface CLI
Ballerina language has a commandline interface that manages the lifecycle of a Ballerina program such as build test and run In addition Ballerina CLI contains all the gRPC related stub and service skeleton generation capabilities The gRPC command in Ballerina CLI is as follows
sh
bal grpc input protofilepath output outputdirectory mode clientservice protopath protodirectory
The input parameter is the only mandatory for the Ballerina gRPC command and it specifies the path of the protobuf file of a gRPC service The optional output parameter indicates the path that output will be written If the output path is not specified the output will be written to a directory corresponding to the package in the Protocol Buffers definition If the package is not specified the output will be written to a temp directory in the current location The optional mode indicate what type of output files are needed For example if mode specifies as service the gRPC command will generate the relevant stub file along with a service skeleton If the mode is client the gRPC command will generate a sample client code along with the stub If nothing is specified only the stub file is generated The optional protopathoption state the path to a directory in which to look for proto files when resolving import directives
3 Protocol Buffers to Ballerina Data Mapping
The following table illustrates the data mapping of protocol buffers data types to relevant Ballerina types
Protobuf TypeBallerina Type
googleprotobufDoubleValuefloat
googleprotobufFloatValuefloat
googleprotobufInt64Valueint
googleprotobufUInt64Valueint
googleprotobufInt32Valueint
googleprotobufUInt32Valueint
googleprotobufBoolValueboolean
googleprotobufStringValuestring
googleprotobufBytesValuebyte
googleprotobufEmpty
googleprotobufTimestamptimeUtc
googleprotobufDurationtimeSeconds
googleprotobufStructmapanydata
googleprotobufAnyanyAny
Note that here the any is the namespace of the ballerinaprotobuftypesany submodule Additionally the googleprotobufAny need serialization and deserialization mechanisms To do that ballerinaprotobuftypesany module contains two APIs called pack and unpack to serialize and deserialize Any type records
ballerina
Generate and return the generic anyAny record that is used to represent protobuf Any type
message The record or the scalar value to be packed as Any type
return Any value representation of the given message
public isolated function packValueType message returns Any
Unpack and return the specified Ballerina value
anyValue Any value to be unpacked
targetTypeOfAny Type descriptor of the return value
return Return a value of the given type
public isolated function unpackAny anyValue ValueTypeDesc targetTypeOfAny returns targetTypeOfAnyError
4 gRPC Communication
gRPC has 4 types of RPCs Remote Procedure Calls and Ballerina supports all of them
1 Simple
2 Server streaming
3 Client streaming
4 Bidirectional streaming
Note that to explain the behaviour of these 4 RPC types this document uses the standard Route Guide example
Details of the route guide examplehttpsgrpciodocslanguagesgobasics
Protocol buffer definition of the route guide examplehttpsgithubcomballerinaplatformmoduleballerinagrpcblob674bda12a90f99c2735badc5567cd7dd7e14ba09examplesrouteguideprotofilerouteguideproto
41 Simple RPC
The RPC service definition of a simple RPCs is as follows
proto
service RouteGuide 
rpc GetFeaturePoint returns Feature 
The Ballerina service implementation of a gRPC can be done in two ways
1 Using direct returning
2 Using a caller
Directly returning the response is the most convenient implementation However for asynchronous RPC calls directly returning is not suitable and for such use cases using a caller is the ideal approach In addition each RPC call simple server streaming client streaming and bidirectional streaming can be implemented in both ways
RPC Using Direct Return
Ballerina CLI generates the relevant service skeleton and the implementation of the simple RPC call using direct return is as follows
ballerina
service RouteGuide on new grpcListener8980 
remote function GetFeaturePoint point returns Featureerror 
foreach Feature feature in FEATURES 
if featurelocation point 
return feature
return location point name 
Here the RPC implementation creates a featured record and directly return it from the remote method
RPC Using a Caller
The Ballerina implementation of the same simple RPC using a caller is as follows
ballerina
service RouteGuide on new grpcListener8980 
remote function GetFeatureRouteGuideFeatureCaller caller Point point returns error 
Featureerror feature featureFromPointpoint
if feature is Feature 
check callersendFeaturefeature
else if feature is error 
check callersendErrorgrpcError feature
else 
check callersendFeaturelocation latitude 0 longitude 0 name 
RPC Invocation
For each RPC in the protobuf definition the generated Ballerina stub contains a client That generated client interacts with the actual RPC service during an RPC call
ballerina
public function main returns error 
RouteGuideClient ep check new httplocalhost8980
Feature feature check epGetFeaturelatitude 406109563 longitude 742186778
42 Server Streaming RPC
The RPC service definition of a server streaming call is as follows
proto
service RouteGuide 
rpc ListFeaturesRectangle returns stream Feature 
RPC Using Direct Return
The Ballerina implementation of the server streaming RPC using a direct return is as follows
ballerina
service RouteGuide on new grpcListener8980 
remote function ListFeaturesRectangle rectangle returns streamFeature grpcErrorerror 
Feature selectedFeatures 
foreach Feature feature in FEATURES 
if inRangefeaturelocation rectangle 
selectedFeaturespushfeature
return selectedFeaturestoStream
RPC Using a Caller
The Ballerina implementation of the server streaming RPC using a caller return is as follows
ballerina
service RouteGuide on new grpcListener8980 
remote function ListFeaturesRouteGuideFeatureCaller caller Rectangle rectangle returns error 
foreach Feature feature in FEATURES 
if inRangefeaturelocation rectangle 
check callersendFeaturefeature
RPC Invocation
For each RPC in the protobuf definition the generated Ballerina stub contains a client which interacts with the actual RPC service In Ballerina gRPC invoking a server streaming returns a Ballerina streaming object that can iterate through using streaming operations provided by the language
ballerina
public function main returns error 
RouteGuideClient ep check new httplocalhost8980
Rectangle rectangle 
lo latitude 400000000 longitude 750000000
hi latitude 420000000 longitude 730000000
streamFeature grpcError features check epListFeaturesrectangle
check featuresforEachfunctionFeature f 
ioprintlnResult latflocationlatitude lonflocationlongitude
43 Client Streaming RPC
The RPC service definition of a client streaming call is as follows
proto
service RouteGuide 
rpc RecordRoutestream Point returns RouteSummary 
RPC Using Direct Return
The Ballerina implementation of the client streaming RPC using a direct return is as follows
ballerina
service RouteGuide on new grpcListener8980 
remote function RecordRoutestreamPoint grpcError clientStream returns RouteSummaryerror 
Point lastPoint 
int pointCount 0
int featureCount 0
int distance 0
decimal startTime timemonotonicNow
check clientStreamforEachfunctionPoint p 
pointCount 1
if pointExistsInFeaturesFEATURES p 
featureCount 1
if lastPoint is Point 
distance calculateDistancePointlastPoint p
lastPoint p
decimal endTime timemonotonicNow
int elapsedTime intendTime startTime
return pointcount pointCount featurecount featureCount distance distance elapsedtime elapsedTime
RPC Using a Caller
The Ballerina implementation of the client streaming RPC using a caller return is as follows
ballerina
service RouteGuide on new grpcListener8980 
remote function RecordRouteRouteGuideRouteSummaryCaller caller streamPoint grpcError clientStream returns error 
Point lastPoint 
int pointCount 0
int featureCount 0
int distance 0
decimal startTime timemonotonicNow
check clientStreamforEachfunctionPoint p 
pointCount 1
if pointExistsInFeaturesFEATURES p 
featureCount 1
if lastPoint is Point 
distance calculateDistancePointlastPoint p
lastPoint p
decimal endTime timemonotonicNow
int elapsedTime intendTime startTime
return callersendRouteSummarypointcount pointCount featurecount featureCount distance distance elapsedtime elapsedTime
RPC Invocation
For each RPC in the protobuf definition the generated Ballerina stub contains a client That generated client interacts with the actual RPC service during an RPC call Unlike the server streaming scenario the Ballerina client streaming does not use a streaming object to pass data to the clientside because it should allow users to send and receive data asynchronously Instead it uses a streaming object to send and receive data from the server
ballerina
public function main returns error 
RouteGuideClient ep check new httplocalhost8980
Point points 
latitude 406109563 longitude 742186778 
latitude 411733222 longitude 744228360 
latitude 744228334 longitude 742186778
RecordRouteStreamingClient recordRouteStrmClient check epRecordRoute
foreach Point p in points 
check recordRouteStrmClientsendPointp
check recordRouteStrmClientcomplete
RouteSummary routeSummary check recordRouteStrmClientreceiveRouteSummary
if routeSummary is RouteSummary 
ioprintlnFinished trip with routeSummarypointcount points Passed routeSummaryfeaturecount features Travelled routeSummarydistance meters It took routeSummaryelapsedtime seconds
44 Bidirectional Streaming RPC
The RPC service definition of a bidirectional streaming call is as follows
proto
service RouteGuide 
rpc RouteChatstream RouteNote returns stream RouteNote 
RPC Using Direct Return
The Ballerina implementation of the bidirectional streaming RPC using a direct return is as follows
ballerina
service RouteGuide on new grpcListener8980 
remote function RouteChatstreamRouteNote grpcError clientNotesStream returns streamRouteNote grpcErrorerror 
RouteNote routeNotes 
check clientNotesStreamforEachfunctionRouteNote note 
ROUTENOTESpushnote
foreach RouteNote n in ROUTENOTES 
if nlocation notelocation 
routeNotespushnote
return routeNotestoStream
Note that here using direct return will not address the exact use case This example was added only for completeness
RPC Using a Caller
The Ballerina implementation of the bidirectional streaming RPC using a caller return is as follows
ballerina
service RouteGuide on new grpcListener8980 
remote function RouteChatRouteGuideRouteNoteCaller caller streamRouteNote grpcError clientNotesStream returns error 
check clientNotesStreamforEachfunctionRouteNote note 
futureerror f1 start sendRouteNotesFromLocationcaller notelocation
lock 
ROUTENOTESpushnote
error waitErr wait f1
RPC Invocation
For each RPC in the protobuf definition the generated Ballerina stub contains a client That generated client interacts with the actual RPC service during an RPC call As the client streaming scenario the bidirectional streaming case also uses a streaming object to send and receive data from servers
ballerina
public function main returns error 
RouteGuideClient ep check new httplocalhost8980
Bidirectional streaming
RouteNote routeNotes 
location latitude 406109563 longitude 742186778 message m1 
location latitude 411733222 longitude 744228360 message m2 
location latitude 406109563 longitude 742186778 message m3 
location latitude 411733222 longitude 744228360 message m4 
location latitude 411733222 longitude 744228360 message m5
RouteChatStreamingClient routeClient check epRouteChat
futureerror f1 start readResponserouteClient
foreach RouteNote n in routeNotes 
check routeClientsendRouteNoten
check routeClientcomplete
check wait f1
5 gRPC Security
51 Authentication and Authorization
There are two ways to enable authentication and authorization in gRPC
1 Declarative approach
2 Imperative approach
511 Declarative Approach
This is also known as the configurationdriven approach which is used for simple use cases where users have to provide a set of configurations and do not need to be worried more about how authentication and authorization works The user does not have full control over the configurationdriven approach
The service configurations are used to define the authentication and authorization configurations Users can configure the configurations needed for different authentication schemes and configurations needed for authorizations of each authentication scheme Also the configurations can be provided at the service level The priority will be given from bottom to top Then the auth handler creation and request authenticationauthorization is handled internally without user intervention The requests that succeeded both authentication andor authorization phases according to the configurations will be passed to the business logic layer
5111 Service File User Store
Ballerina gRPC services enable authentication and authorization using a file user store by setting the grpcFileUserStoreConfigWithScopes configurations in the listener
ballerina
grpcServiceConfig 
auth 
fileUserStoreConfig 
scopes admin
grpcServiceDescriptor 
descriptor ROOTDESCRIPTORGRPCSERVICE
descMap getDescriptorMapGrpcService
service HelloWorld on new grpcListener9090 
remote function hello returns string 
return Hello World
toml
Configtoml
ballerinaauthusers
usernamealice
passwordalice123
scopesdeveloper
ballerinaauthusers
usernameldclakmal
passwordldclakmal123
scopesdeveloper admin
ballerinaauthusers
usernameeve
passwordeve123
5112 Service LDAP User Store
Ballerina gRPC services enable authentication and authorization using an LDAP user store by setting the grpcLdapUserStoreConfigWithScopes configurations in the listener
ballerina
grpcServiceConfig 
auth 
ldapUserStoreConfig 
domainName avixlk
connectionUrl ldaplocalhost389
connectionName cnadmindcavixdclk
connectionPassword avix123
userSearchBase ouUsersdcavixdclk
userEntryObjectClass inetOrgPerson
userNameAttribute uid
userNameSearchFilter objectClassinetOrgPersonuid
userNameListFilter objectClassinetOrgPerson
groupSearchBase ouGroupsdcavixdclk
groupEntryObjectClass groupOfNames
groupNameAttribute cn
groupNameSearchFilter objectClassgroupOfNamescn
groupNameListFilter objectClassgroupOfNames
membershipAttribute member
userRolesCacheEnabled true
connectionPoolingEnabled false
connectionTimeout 5
readTimeout 60
scopes admin
grpcServiceDescriptor 
descriptor ROOTDESCRIPTORGRPCSERVICE
descMap getDescriptorMapGrpcService
service HelloWorld on new grpcListener9090 
remote function hello returns string 
return Hello World
5113 Service JWT
Ballerina gRPC services enable authentication and authorization using JWTs by setting the grpcJwtValidatorConfigWithScopes configurations in the listener
ballerina
grpcServiceConfig 
auth 
jwtValidatorConfig 
issuer wso2
audience ballerina
signatureConfig 
certFile resourcepathtopubliccrt
scopeKey scp
scopes admin
grpcServiceDescriptor 
descriptor ROOTDESCRIPTORGRPCSERVICE
descMap getDescriptorMapGrpcService
service HelloWorld on new grpcListener9090 
remote function hello returns string 
return Hello World
5114 Service OAuth2
Ballerina gRPC services enable authentication and authorization using OAuth2 by setting the grpcOAuth2IntrospectionConfigWithScopes configurations in the listener
ballerina
grpcServiceConfig 
auth 
oauth2IntrospectionConfig 
url httpslocalhost9445oauth2introspect
tokenTypeHint accesstoken
scopeKey scp
clientConfig 
customHeaders Authorization Basic YWRtaW46YWRtaW4
secureSocket 
cert resourcepathtopubliccrt
scopes admin
grpcServiceDescriptor 
descriptor ROOTDESCRIPTORGRPCSERVICE
descMap getDescriptorMapGrpcService
service HelloWorld on securedEP 
remote function hello returns string 
return Hello World
5115 Client Basic Auth
Ballerina gRPC clients enable basic auth with credentials by setting the grpcCredentialsConfig configurations in the client
ballerina
HelloWorldClient securedEP check newhttpslocalhost9090
auth 
username john
password ballerina123
5116 Client Bearer Token Auth
Ballerina gRPC clients enable authentication using bearer tokens by setting the grpcBearerTokenConfig configurations in the client
ballerina 
HelloWorldClient securedEP check newhttpslocalhost9090
auth 
token 56ede317451144b48579a08f094ee8c5
5117 Client Self Signed JWT Auth
Ballerina gRPC clients enable authentication using JWTs by setting the grpcJwtIssuerConfig configurations in the client
ballerina
HelloWorldClient securedEP check newhttpslocalhost9090
auth 
username ballerina
issuer wso2
audience ballerina ballerinaorg ballerinaio
keyId 5a0b754895f42798843b745e11a57e9
jwtId JlbmMiOiJBMTI4Q0JDLUhTMjU2In
customClaims scp admin 
expTime 3600
signatureConfig 
config 
keyFile resourcepathtoprivatekey
5118 Client OAuth2
Ballerina gRPC clients enable authentication using OAuth2 by setting the grpcOAuth2GrantConfig configurations in the client OAuth2 can configure in 4 ways
i Credentials Grant Type
ballerina
HelloWorldClient securedEP check newhttpslocalhost9090
auth 
tokenUrl httpslocalhost9445oauth2token
clientId FlfJYKBD2c925h4lkycqNZlC2l4a
clientSecret PJz0UhTJMrHOo68QQNpvnqAY3Aa
scopes admin
clientConfig 
secureSocket 
cert resourcepathtopubliccrt
ii Password Grant Type
ballerina
HelloWorldClient securedEP check newhttpslocalhost9090
auth 
tokenUrl httpslocalhost9445oauth2token
username admin
password admin
clientId FlfJYKBD2c925h4lkycqNZlC2l4a
clientSecret PJz0UhTJMrHOo68QQNpvnqAY3Aa
scopes admin
refreshConfig 
refreshUrl httpslocalhost9445oauth2token
scopes hello
clientConfig 
secureSocket 
cert resourcepathtopubliccrt
clientConfig 
secureSocket 
cert resourcepathtopubliccrt
iii Refresh Token Grant Type
ballerina
HelloWorldClient securedEP check newhttpslocalhost9090
auth 
refreshUrl httpslocalhost9445oauth2token
refreshToken 24f1960385654b5fa03688a945e1f272
clientId FlfJYKBD2c925h4lkycqNZlC2l4a
clientSecret PJz0UhTJMrHOo68QQNpvnqAY3Aa
scopes admin
clientConfig 
secureSocket 
cert resourcepathtopubliccrt
iv JWT Bearer Grant Type
ballerina
HelloWorldClient securedEP check newhttpslocalhost9090
auth 
tokenUrl httpslocalhost9445oauth2token
assertion eyJhbGciOiJFUzI1NiIsImtpZCI6Ijomitted for brevity
clientId FlfJYKBD2c925h4lkycqNZlC2l4a
clientSecret PJz0UhTJMrHOo68QQNpvnqAY3Aa
scopes admin
clientConfig 
secureSocket 
cert resourcepathtopubliccrt
512 Imperative Approach
This is also known as the codedriven approach which is used for advanced use cases where users need to be worried more about how authentication and authorization work and need to have further customizations The user has full control of the codedriven approach The handler creation and authenticationauthorization calls are made by the user at the business logic layer
5121 Service File User Store
Ballerina gRPC services enable authentication and authorization using a file user store by employing the class grpcListenerFileUserStoreBasicAuthHandler
ballerina
service HelloWorld on new grpcListener9090 
remote function sayHelloContextString request returns stringerror 
grpcListenerFileUserStoreBasicAuthHandler handler new
authUserDetailsgrpcUnauthenticatedError authnResult handlerauthenticaterequestheaders
toml
Configtoml
ballerinaobserve
enabledtrue
providernoop
authusers
usernameadmin
password123
scopeswrite update
5122 Service LDAP User Store
Ballerina gRPC services enable authentication and authorization using an LDAP user store by employing the class grpcListenerLdapUserStoreBasicAuthHandler
ballerina
service HelloWorld on new grpcListener9090 
remote function sayHelloContextString request returns stringerror 
grpcLdapUserStoreConfig config 
domainName avixlk
connectionUrl ldaplocalhost389
connectionName cnadmindcavixdclk
connectionPassword avix123
userSearchBase ouUsersdcavixdclk
userEntryObjectClass inetOrgPerson
userNameAttribute uid
userNameSearchFilter objectClassinetOrgPersonuid
userNameListFilter objectClassinetOrgPerson
groupSearchBase ouGroupsdcavixdclk
groupEntryObjectClass groupOfNames
groupNameAttribute cn
groupNameSearchFilter objectClassgroupOfNamescn
groupNameListFilter objectClassgroupOfNames
membershipAttribute member
userRolesCacheEnabled true
connectionPoolingEnabled false
connectionTimeout 5
readTimeout 60
grpcListenerLdapUserStoreBasicAuthHandler handler newconfig
authUserDetailsgrpcUnauthenticatedError authnResult handlerauthenticaterequestheaders
5123 Service JWT
Ballerina gRPC services enable authentication and authorization using JWTs by employing the class grpcListenerJwtAuthHandler
ballerina
service HelloWorld on new grpcListener9090 
remote function sayHelloContextString request returns stringerror 
grpcJwtValidatorConfig config 
issuer wso2
audience ballerina
signatureConfig 
trustStoreConfig 
trustStore 
path TRUSTSTOREPATH
password ballerina
certAlias ballerina
scopeKey scope
grpcListenerJwtAuthHandler handler newconfig
jwtPayloadgrpcUnauthenticatedError authResult handlerauthenticaterequestheaders
5124 Service OAuth2
Ballerina gRPC services enable authentication and authorization using OAuth2 by employing the class grpcOAuth2IntrospectionConfig
ballerina
service HelloWorld on new grpcListener9090 
remote function sayHelloContextString request returns stringerror 
grpcOAuth2IntrospectionConfig config 
url httpslocalhost oauth2AuthorizationServerPorttoString oauth2tokenintrospect
tokenTypeHint accesstoken
scopeKey scp
clientConfig 
secureSocket 
cert 
path TRUSTSTOREPATH
password ballerina

grpcListenerOAuth2Handler handler newconfig
oauth2IntrospectionResponsegrpcUnauthenticatedErrorgrpcPermissionDeniedError authResult handlerauthorizerequestheaders read
5125 Client Basic Auth
Ballerina gRPC clients enable authentication and authorization using basic auth by employing class grpcClientBasicAuthHandler To enable authentication and authorization the generated headers of the enrich API needs to pass to the RPC call
ballerina
grpcCredentialsConfig config 
username admin
password 123
grpcClientBasicAuthHandler handler new config
mapstringstringgrpcClientAuthError result handlerenrichrequestHeaders
5126 Client Bearer Token Auth
Ballerina gRPC clients enable authentication and authorization using bearer tokens by employing class grpcClientBearerTokenAuthHandler To enable authentication and authorization the generated headers of the enrich API needs to pass to the RPC call
ballerina
grpcBearerTokenConfig config token eyJhbGciOiJSUzI1NiIsICJ0eXAiOiJKV1QifQ
grpcClientBearerTokenAuthHandler handler new config
mapstringstringgrpcClientAuthError result handlerenrichrequestHeaders
5127 Client Self Signed JWT Auth
Ballerina gRPC clients enable authentication and authorization using JWTs by employing class grpcClientSelfSignedJwtAuthHandler To enable authentication and authorization the generated headers of the enrich API needs to pass to the RPC call
ballerina
grpcJwtIssuerConfig config 
username admin
issuer wso2
audience ballerina
customClaims scope write 
signatureConfig 
config 
keyStore 
path KEYSTOREPATH
password ballerina
keyAlias ballerina
keyPassword ballerina
grpcClientSelfSignedJwtAuthHandler handler newconfig
mapstringstringgrpcClientAuthError result handlerenrichrequestHeaders
5128 Client OAuth2
Ballerina gRPC clients enable authentication and authorization using OAuth2 by employing class grpcClientOAuth2Handler To enable authentication and authorization the generated headers of the enrich API needs to pass to the RPC call
ballerina
grpcOAuth2ClientCredentialsGrantConfig config 
tokenUrl httpslocalhost oauth2AuthorizationServerPorttoString oauth2token
clientId 3MVG9YDQS5WtC11paU2WcQjBB3L5w4gz52uriT8ksZ3nUVjKvrfQMrU4uvZohTftxStwNEW4cfStBEGRxRL68
clientSecret 9205371918321623741
scopes tokenscope1 tokenscope2
clientConfig 
secureSocket 
cert 
path TRUSTSTOREPATH
password ballerina
grpcClientOAuth2Handler handler newconfig
mapstringstringgrpcClientAuthError result handlerenrichrequestHeaders
52 SSLTLS and Mutual SSL
A gRPC listener with configuration grpcListenerSecureSocket exposes gRPC services with SSLTLS
ballerina
listener grpcListener securedEp new9090
secureSocket 
key 
certFile resourcespubliccrt
keyFile resourcesprivatekey
grpcServiceDescriptor 
descriptor ROOTDESCRIPTORGRPCSERVICE
descMap getDescriptorMapGrpcService
service HelloWorld on securedEp 
remote function hello returns string 
return Hello World
A gRPC client with configuration grpcClientSecureSocket can invoke gRPC services with SSLTLS
ballerina
HelloWorldClient securedEp check newhttpslocalhost9090
secureSocket 
cert resourcepathtopubliccrt
By configuring the mutualSsl entry in the grpcListenerSecureSocket gRPC services can expose with mutual SSL
ballerina
listener grpcListener securedEP new9090
secureSocket 
key 
certFile resourcepathtopubliccrt
keyFile resourcepathtoprivatekey
mutualSsl 
verifyClient grpcREQUIRE
cert resourcepathtopubliccrt
protocol 
name grpcTLS
versions TLSv12 TLSv11
ciphers TLSECDHERSAWITHAES128CBCSHA
6 gRPC Utility Functions
61 gRPC Deadline
The following API sets a deadline for each request
ballerina
Enables the deadline by adding the deadline header to the given headers
ballerina
timeUtc current timeutcNow
timeUtc deadline timeutcAddSecondscurrent 300
mapstringstring headers grpcsetDeadlinedeadline
deadline The deadline time value this should be a specific time and not a duration
headerMap Optional header map if this is not specified it creates a new header set
return The header map that includes the deadline
public isolated function setDeadlinetimeUtc deadline mapstringstring headerMap returns mapstringstring
If a particular RPC exceeds the specified deadline the response will be a grpcDeadlineExceededError
62 gRPC Compression
The following API enables compression for gRPC calls Currently Gzip compression is supported by the Ballerina gRPC library
ballerina
Enables the compression support by adding the grpcencoding header to the given headers
ballerina
mapstringstring headers grpcsetCompressiongrpcGZIP
compressionType The compression type
headerMap Optional header map if this is not specified it creates a new header set
return The header map that includes the compression headers
public isolated function setCompressionCompressionType compressionType mapstringstring headerMap returns mapstringstring
63 gRPC Access and Trace Logs
Access and trace logs can be enabled by adding the following configurations to the Configtoml file in a Ballerina project
toml
ballerinagrpctraceLogAdvancedConfig
Enable printing trace logs in console
console true Default is false
Prints the trace logs to the given file
path testTraceLogtxt Optional
Sends the trace logs to the configured endpoint
host localhost Optional
port 8080 Optional
ballerinagrpcaccessLogConfig
Enable printing access logs in console
console true Default is false
Prints the access logs to the given file
path testTraceLogtxt Optional
64 gRPC Retry
Clientlevel retrying can be enabled by passing the following configurations to the client initialization
ballerina
Configurations for facilitating the retry capability of the gRPC client
retryCount Maximum number of retry attempts in a failure scenario
interval Initial intervalin seconds between the retry attempts
maxInterval Maximum intervalin seconds between two retry attempts
backoffFactor Retry interval will be multiplied by this factor in between retry attempts
errorTypes Error types which should be considered as failure scenarios to retry
public type RetryConfiguration record 
int retryCount
decimal interval
decimal maxInterval
decimal backoffFactor
ErrorType errorTypes defaultErrorTypes

